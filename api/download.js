import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

function cors(res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
}

function wrapLines(ctx, text, maxChars) {
  const words = String(text || "").split(/\s+/);
  const lines = [];
  let line = "";
  for (const w of words) {
    const t = (line ? line + " " : "") + w;
    if (t.length > maxChars) {
      if (line) lines.push(line);
      line = w;
    } else line = t;
  }
  if (line) lines.push(line);
  return lines;
}

export default async function handler(req, res) {
  cors(res);
  if (req.method === "OPTIONS") { res.status(204).end(); return; }
  if (req.method !== "POST") { res.status(405).json({ ok:false, error:"Use POST" }); return; }

  try {
    const { filename, content } = await new Promise((resolve, reject) => {
      let body = "";
      req.on("data", c => body += c);
      req.on("end", () => { try { resolve(JSON.parse(body || "{}")); } catch(e){ reject(new Error("Invalid JSON body")); }});
      req.on("error", reject);
    });

    const a = content || {};
    const safe = (filename || "analysis_poster").replace(/[^a-z0-9_\-.]/gi, "_");

    // Create PDF
    const pdf = await PDFDocument.create();
    const page = pdf.addPage([595.28, 841.89]); // A4
    const width = page.getWidth();
    const height = page.getHeight();

    // Fonts
    const helv = await pdf.embedFont(StandardFonts.Helvetica);
    const helvBold = await pdf.embedFont(StandardFonts.HelveticaBold);

    // Palette
    const bg = rgb(0.043, 0.063, 0.125);      // #0b1020
    const card = rgb(0.071, 0.094, 0.2);      // #121833
    const text = rgb(0.914, 0.933, 0.984);    // #e9eefb
    const muted = rgb(0.72, 0.75, 0.87);      // #b7c0de
    const accent = rgb(0.48, 0.64, 1.0);      // #7aa2ff
    const accent2 = rgb(0.49, 0.99, 0.76);    // #7cffc1
    const line = rgb(0.15, 0.2, 0.42);        // #263477

    // Background
    page.drawRectangle({ x: 0, y: 0, width, height, color: bg });

    // Header banner
    page.drawRectangle({ x: 24, y: height - 80, width: width - 48, height: 52, color: card });
    page.drawText("BizDoc Report", { x: 36, y: height - 62, size: 20, font: helvBold, color: text });
    page.drawText("Generated by your analyzer", { x: 36, y: height - 82, size: 10, font: helv, color: muted });

    // Meta line (file name + date)
    const today = new Date().toISOString().slice(0, 10);
    page.drawText(`Date: ${today}`, { x: width - 140, y: height - 62, size: 10, font: helv, color: muted });

    // Summary card
    const cardX = 24, cardW = width - 48;
    page.drawRectangle({ x: cardX, y: height - 280, width: cardW, height: 170, color: card, borderColor: line, borderWidth: 1 });
    page.drawText("Summary", { x: cardX + 12, y: height - 118, size: 14, font: helvBold, color: text });
    const summary = a.summary || "No summary.";
    const sLines = wrapLines(null, summary, 105);
    let sy = height - 140;
    for (const l of sLines.slice(0, 10)) {
      page.drawText(l, { x: cardX + 12, y: sy, size: 11, font: helv, color: text });
      sy -= 14;
    }

    // Score bars (visual KPI)
    const scores = a.scores || {};
    const labels = ["finance","operations","marketing","compliance","technology"];
    const startY = height - 320;
    const rowH = 22;
    const barMaxW = cardW - 180;

    page.drawText("Scorecard", { x: cardX, y: startY + 28, size: 14, font: helvBold, color: text });

    labels.forEach((k, i) => {
      const y = startY - i * (rowH + 8);
      const v = Math.max(0, Math.min(100, Number(scores[k] || 0)));
      // label
      page.drawText(k.toUpperCase(), { x: cardX, y, size: 10, font: helvBold, color: muted });
      // bar bg
      page.drawRectangle({ x: cardX + 90, y: y - 3, width: barMaxW, height: 10, color: line });
      // bar value (gradient substitute by two tones)
      const valW = (barMaxW * v) / 100;
      page.drawRectangle({ x: cardX + 90, y: y - 3, width: valW, height: 10, color: accent });
      page.drawRectangle({ x: cardX + 90, y: y - 3, width: Math.max(0, valW - 12), height: 10, color: accent2, opacity: 0.35 });
      // value text
      page.drawText(String(Math.round(v)) + "%", { x: cardX + 100 + barMaxW, y, size: 10, font: helvBold, color: text });
    });

    // Two column cards: Highlights & Recommendations
    const colY = 240;
    const colH = 220;
    const colGap = 16;
    const colW = (cardW - colGap) / 2;

    // Highlights
    page.drawRectangle({ x: cardX, y: colY, width: colW, height: colH, color: card, borderColor: line, borderWidth: 1 });
    page.drawText("Highlights", { x: cardX + 12, y: colY + colH - 20, size: 14, font: helvBold, color: text });
    const hi = (a.highlights || []).slice(0, 10);
    let hy = colY + colH - 40;
    for (const h of hi) {
      const lines = wrapLines(null, "• " + h, 50);
      for (const l of lines) {
        page.drawText(l, { x: cardX + 12, y: hy, size: 11, font: helv, color: text });
        hy -= 14;
        if (hy < colY + 14) break;
      }
      if (hy < colY + 14) break;
    }

    // Recommendations
    const rx = cardX + colW + colGap;
    page.drawRectangle({ x: rx, y: colY, width: colW, height: colH, color: card, borderColor: line, borderWidth: 1 });
    page.drawText("Recommendations", { x: rx + 12, y: colY + colH - 20, size: 14, font: helvBold, color: text });
    const recs = (a.recommendations || []).slice(0, 10);
    let ry = colY + colH - 40;
    for (const r of recs) {
      const lines = wrapLines(null, "• " + r, 50);
      for (const l of lines) {
        page.drawText(l, { x: rx + 12, y: ry, size: 11, font: helv, color: text });
        ry -= 14;
        if (ry < colY + 14) break;
      }
      if (ry < colY + 14) break;
    }

    // Footer
    page.drawRectangle({ x: 24, y: 32, width: width - 48, height: 4, color: accent });

    // Save & send
    const bytes = await pdf.save();
    const buf = Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename="${safe}.pdf"`);
    res.status(200).send(buf);
  } catch (err) {
    res.status(400).json({ ok:false, error: err.message || String(err) });
  }
}
